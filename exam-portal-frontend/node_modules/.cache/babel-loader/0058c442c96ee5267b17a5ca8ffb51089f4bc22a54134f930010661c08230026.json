{"ast":null,"code":"var _jsxFileName = \"/Users/aryansingh/Desktop/Exam portal/exam-portal-frontend/src/pages/AdminCreateExam.jsx\",\n  _s = $RefreshSig$();\n// Input: Exam Name\n// Line Break\n// Input: Subject\n// Line Break\n// Input: Duration\n// Line Break\n// Input: Total Marks\n// Line Break\n// Input: Question 1\n// There should be input for only one question initially\n// Line Break\n// Button: Add Question\n// When Add Question button is clicked, there should be a new input for Question 2 and an api request should be made to save the question in the question collection and the response should be stored \n// Line Break\n// Button: Create Exam\n// When Create Exam button is clicked, the exam should be created and the user should be redirected to the AdminDashboard page\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminCreateExam = () => {\n  _s();\n  const navigate = useNavigate();\n  const [examName, setExamName] = useState('');\n  const [subject, setSubject] = useState('');\n  const [duration, setDuration] = useState('');\n  const [totalMarks, setTotalMarks] = useState('');\n  const [questions, setQuestions] = useState(['']);\n  const [questionIds, setQuestionIds] = useState([]);\n  const handleAddQuestion = () => {\n    se;\n    fetch('http://localhost:5001/api/questions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        questionText: questions[questions.length - 1].questionText,\n        correctAnswer: questions[questions.length - 1].correctAnswer,\n        marks: questions[questions.length - 1].marks\n      })\n    }).then(response => response.json()).then(data => {\n      setQuestionIds([...questionIds, data.id]);\n      console.log(data);\n    }).catch(error => console.error(error));\n    setQuestions([...questions, {\n      questionText: '',\n      correctAnswer: '',\n      marks: ''\n    }]);\n  };\n  const handleQuestionChange = (index, value) => {\n    const updatedQuestions = [...questions];\n    updatedQuestions[index] = value;\n    setQuestions(updatedQuestions);\n  };\n  const handleCreateExam = () => {\n    const examData = {\n      name: examName,\n      duration: duration,\n      subject: subject,\n      totalMarks: totalMarks,\n      questionIds: questionIds,\n      studentIds: []\n    };\n    fetch('http://localhost:5001/api/admin-create-exams', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(examData)\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      console.log(data);\n      navigate('/admin-dashboard'); // Navigate to the exams page\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: examName,\n      onChange: e => setExamName(e.target.value),\n      placeholder: \"Exam Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: subject,\n      onChange: e => setSubject(e.target.value),\n      placeholder: \"Subject\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: duration,\n      onChange: e => setDuration(e.target.value),\n      placeholder: \"Duration\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: totalMarks,\n      onChange: e => setTotalMarks(e.target.value),\n      placeholder: \"Total Marks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: question.questionText,\n        onChange: e => handleQuestionChange(index, 'questionText', e.target.value),\n        placeholder: \"Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: question.correctAnswer,\n        onChange: e => handleQuestionChange(index, 'correctAnswer', e.target.value),\n        placeholder: \"Correct Answer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: question.marks,\n        onChange: e => handleQuestionChange(index, 'marks', e.target.value),\n        placeholder: \"Marks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddQuestion,\n      children: \"Add Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCreateExam,\n      children: \"Create Exam\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminCreateExam, \"trDXn7YODci3Sxw9mN+8MtRgak8=\", false, function () {\n  return [useNavigate];\n});\n_c = AdminCreateExam;\nexport default AdminCreateExam;\nvar _c;\n$RefreshReg$(_c, \"AdminCreateExam\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","AdminCreateExam","_s","navigate","examName","setExamName","subject","setSubject","duration","setDuration","totalMarks","setTotalMarks","questions","setQuestions","questionIds","setQuestionIds","handleAddQuestion","se","fetch","method","headers","body","JSON","stringify","questionText","length","correctAnswer","marks","then","response","json","data","id","console","log","catch","error","handleQuestionChange","index","value","updatedQuestions","handleCreateExam","examData","name","studentIds","ok","Error","status","children","type","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","map","question","onClick","_c","$RefreshReg$"],"sources":["/Users/aryansingh/Desktop/Exam portal/exam-portal-frontend/src/pages/AdminCreateExam.jsx"],"sourcesContent":["// Input: Exam Name\n// Line Break\n// Input: Subject\n// Line Break\n// Input: Duration\n// Line Break\n// Input: Total Marks\n// Line Break\n// Input: Question 1\n// There should be input for only one question initially\n// Line Break\n// Button: Add Question\n// When Add Question button is clicked, there should be a new input for Question 2 and an api request should be made to save the question in the question collection and the response should be stored \n// Line Break\n// Button: Create Exam\n// When Create Exam button is clicked, the exam should be created and the user should be redirected to the AdminDashboard page\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nconst AdminCreateExam = () => {\n  const navigate = useNavigate();\n  const [examName, setExamName] = useState('');\n  const [subject, setSubject] = useState('');\n  const [duration, setDuration] = useState('');\n  const [totalMarks, setTotalMarks] = useState('');\n  const [questions, setQuestions] = useState(['']);\n  const [questionIds, setQuestionIds] = useState([]);\n\n  const handleAddQuestion = () => {\n    se\n    fetch('http://localhost:5001/api/questions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        questionText: questions[questions.length - 1].questionText,\n        correctAnswer: questions[questions.length - 1].correctAnswer,\n        marks: questions[questions.length - 1].marks\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        setQuestionIds([...questionIds, data.id]);\n        console.log(data)\n      })\n      .catch((error) => console.error(error));\n    setQuestions([...questions, { questionText: '', correctAnswer: '', marks: '' }]);\n  };\n\n  const handleQuestionChange = (index, value) => {\n    const updatedQuestions = [...questions];\n    updatedQuestions[index] = value;\n    setQuestions(updatedQuestions);\n  };\n\n  const handleCreateExam = () => {\n    const examData = {\n      name: examName,\n      duration: duration,\n      subject: subject,\n      totalMarks: totalMarks,\n      questionIds: questionIds,\n      studentIds: [],\n    };\n    fetch('http://localhost:5001/api/admin-create-exams', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(examData),\n    })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then(data => {\n        console.log(data);\n        navigate('/admin-dashboard'); // Navigate to the exams page\n      })\n      .catch(error => {\n        console.error('Error:', error);\n      });\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={examName}\n        onChange={(e) => setExamName(e.target.value)}\n        placeholder=\"Exam Name\"\n      />\n      <br />\n      <input\n        type=\"text\"\n        value={subject}\n        onChange={(e) => setSubject(e.target.value)}\n        placeholder=\"Subject\"\n      />\n      <br />\n      <input\n        type=\"text\"\n        value={duration}\n        onChange={(e) => setDuration(e.target.value)}\n        placeholder=\"Duration\"\n      />\n      <br />\n      <input\n        type=\"text\"\n        value={totalMarks}\n        onChange={(e) => setTotalMarks(e.target.value)}\n        placeholder=\"Total Marks\"\n      />\n      <br />\n      {questions.map((question, index) => (\n        <div key={index}>\n          <input\n            type=\"text\"\n            value={question.questionText}\n            onChange={(e) => handleQuestionChange(index, 'questionText', e.target.value)}\n            placeholder=\"Question\"\n          />\n          <br />\n          <input\n            type=\"text\"\n            value={question.correctAnswer}\n            onChange={(e) => handleQuestionChange(index, 'correctAnswer', e.target.value)}\n            placeholder=\"Correct Answer\"\n          />\n          <br />\n          <input\n            type=\"number\"\n            value={question.marks}\n            onChange={(e) => handleQuestionChange(index, 'marks', e.target.value)}\n            placeholder=\"Marks\"\n          />\n        </div>\n      ))}\n      <button onClick={handleAddQuestion}>Add Question</button>\n      <br />\n      <button onClick={handleCreateExam}>Create Exam</button>\n    </div>\n  );\n};\n\nexport default AdminCreateExam;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
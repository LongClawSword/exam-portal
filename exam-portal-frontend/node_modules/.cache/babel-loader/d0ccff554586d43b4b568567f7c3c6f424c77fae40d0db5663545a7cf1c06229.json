{"ast":null,"code":"var _jsxFileName = \"/Users/aryansingh/Desktop/Exam portal/exam-portal-frontend/src/pages/StudentExamResult.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction StudentExamResult() {\n  _s();\n  const {\n    studentId,\n    examId\n  } = useParams();\n  const [exam, setExam] = useState(null);\n  const [answers, setAnswers] = useState([]);\n  const [questions, setQuestions] = useState([]);\n  const [marks, setMarks] = useState([]);\n  useEffect(() => {\n    const fetchExam = async () => {\n      // ...existing code...\n\n      const response = await fetch(`http://localhost:5001/api/student-view-marks/${studentId}/${examId}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const marksData = await response.json();\n      setMarks(marksData.marks);\n    };\n    fetchExam();\n  }, [examId, studentId]);\n  useEffect(() => {\n    const fetchExam = async () => {\n      try {\n        const response = await fetch(`http://localhost:5001/api/student-exam/${examId}`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const examData = await response.json();\n        setExam(examData);\n        const answerPromises = examData.questionIds.map(async questionId => {\n          const response = await fetch(`http://localhost:5001/api/student-view-answer/${studentId}/${questionId}`);\n          if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n          const answerData = await response.json();\n          return answerData.answerText;\n        });\n        const questionPromises = examData.questionIds.map(async questionId => {\n          const response = await fetch(`http://localhost:5001/api/student-question/${questionId}`);\n          if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n          const questionData = await response.json();\n          return questionData.questionText;\n        });\n        const questions = await Promise.all(questionPromises);\n        setQuestions(questions);\n        const answers = await Promise.all(answerPromises);\n        setAnswers(answers);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchExam();\n  }, [examId, studentId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: exam && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Exam Details:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Name: \", exam.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Duration: \", exam.duration]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total Marks: \", exam.totalMarks]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Subject: \", exam.subject]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Marks Obtained: \", marks]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), exam.questionIds.map((id, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Question: \", questions[index]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Answer: \", answers[index]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(StudentExamResult, \"vE1y1Ly9fn6E8bT2T/ip5mrqftM=\", false, function () {\n  return [useParams];\n});\n_c = StudentExamResult;\nexport default StudentExamResult;\nvar _c;\n$RefreshReg$(_c, \"StudentExamResult\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","Fragment","_Fragment","StudentExamResult","_s","studentId","examId","exam","setExam","answers","setAnswers","questions","setQuestions","marks","setMarks","fetchExam","response","fetch","ok","Error","status","marksData","json","examData","answerPromises","questionIds","map","questionId","answerData","answerText","questionPromises","questionData","questionText","Promise","all","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","name","duration","totalMarks","subject","id","index","_c","$RefreshReg$"],"sources":["/Users/aryansingh/Desktop/Exam portal/exam-portal-frontend/src/pages/StudentExamResult.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nfunction StudentExamResult() {\n  const { studentId, examId } = useParams();\n  const [exam, setExam] = useState(null);\n  const [answers, setAnswers] = useState([]);\n  const [questions, setQuestions] = useState([]);\n  const [marks, setMarks] = useState([]);\n\n\n  useEffect(() => {\n    const fetchExam = async () => {\n      // ...existing code...\n\n      const response = await fetch(`http://localhost:5001/api/student-view-marks/${studentId}/${examId}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const marksData = await response.json();\n      setMarks(marksData.marks);\n    };\n\n    fetchExam();\n  }, [examId, studentId]);\n\n  useEffect(() => {\n    const fetchExam = async () => {\n      try {\n        const response = await fetch(`http://localhost:5001/api/student-exam/${examId}`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const examData = await response.json();\n        setExam(examData);\n\n\n        const answerPromises = examData.questionIds.map(async (questionId) => {\n          const response = await fetch(`http://localhost:5001/api/student-view-answer/${studentId}/${questionId}`);\n          if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n          const answerData = await response.json();\n          return answerData.answerText;\n        });\n\n        const questionPromises = examData.questionIds.map(async (questionId) => {\n          const response = await fetch(`http://localhost:5001/api/student-question/${questionId}`);\n          if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n          const questionData = await response.json();\n          return questionData.questionText;\n        });\n\n        const questions = await Promise.all(questionPromises);\n        setQuestions(questions);\n        const answers = await Promise.all(answerPromises);\n        setAnswers(answers);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchExam();\n  }, [examId, studentId]);\n  return (\n    <div>\n      {exam && (\n        <>\n          <h2>Exam Details:</h2>\n          <p>Name: {exam.name}</p>\n          <p>Duration: {exam.duration}</p>\n          <p>Total Marks: {exam.totalMarks}</p>\n          <p>Subject: {exam.subject}</p>\n          <p>Marks Obtained: {marks}</p>\n          {exam.questionIds.map((id, index) => (\n            <div key={index}>\n              <p>Question: {questions[index]}</p>\n              <p>Answer: {answers[index]}</p>\n            </div>\n          ))}\n        </>\n      )}\n    </div>\n  );\n}\nexport default StudentExamResult;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
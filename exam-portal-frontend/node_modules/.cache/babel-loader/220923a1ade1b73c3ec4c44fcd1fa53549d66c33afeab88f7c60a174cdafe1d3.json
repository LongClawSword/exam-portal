{"ast":null,"code":"var _jsxFileName = \"/Users/aryansingh/Desktop/Exam portal/exam-portal-frontend/src/pages/AdminSubmission.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\n// ...\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AdminSubmission = () => {\n  _s();\n  const {\n    examId,\n    studentId\n  } = useParams();\n  const [exam, setExam] = useState(null);\n  const [questionTexts, setQuestionTexts] = useState([]);\n  const [answerTexts, setAnswerTexts] = useState([]);\n  const [marks, setMarks] = useState('');\n  useEffect(() => {\n    const fetchExamDetails = async () => {\n      try {\n        const response = await fetch(`http://localhost:5001/api/admin-view-exams/${examId}`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const exam = await response.json();\n        setExam(exam);\n\n        // Fetch question text for each question ID\n        const questionData = await Promise.all(exam.questionIds.map(async id => {\n          const response = await fetch(`http://localhost:5001/api/admin-view-question/${id}/${studentId}`);\n          if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n          const question = await response.json();\n          return {\n            text: question.questionText,\n            correctAnswer: question.correctAnswer,\n            marks: question.marks\n          };\n        }));\n        setQuestionTexts(questionData);\n\n        // Fetch answer text for each question ID and student ID\n        const answerTexts = await Promise.all(exam.questionIds.map(async id => {\n          const response = await fetch(`http://localhost:5001/api/admin-view-answer/${id}/${studentId}`);\n          if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n          const answer = await response.json();\n          return answer.answerText;\n        }));\n        setAnswerTexts(answerTexts);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchExamDetails();\n  }, [examId]);\n  useEffect(() => {\n    const fetchMarks = async () => {\n      try {\n        const response = await fetch(`http://localhost:5001/api/admin-view-marks/${examId}/${studentId}`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const marksData = await response.json();\n        setMarks(marksData.marks);\n      } catch (error) {\n        if (error.message === 'HTTP error! status: 404') {\n          setMarks('Not Graded');\n        } else {\n          console.error(error);\n        }\n      }\n    };\n    fetchMarks();\n  }, [examId, studentId]);\n  const submitMarks = async () => {\n    try {\n      const response = await fetch(`http://localhost:5001/api/admin-submit-marks/${studentId}/${examId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          marks\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      alert(\"Marks submitted successfully!\");\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: exam && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Exam Details:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Name: \", exam.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Duration: \", exam.duration]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total Marks: \", exam.totalMarks]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" Marks Obtained: \", typeof marks === 'string' ? marks : marks.marks]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Question IDs and Texts:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }, this), questionTexts.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: question.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Correct Answer: \", question.correctAnswer]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Marks: \", question.marks]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Answer: \", answerTexts[index]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 5\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 3\n      }, this)), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: marks,\n        onChange: e => setMarks(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: submitMarks,\n        children: \"Submit Marks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n};\n_s(AdminSubmission, \"XaUZJASxd1NCjVMg3Zwy4TvQtak=\", false, function () {\n  return [useParams];\n});\n_c = AdminSubmission;\nexport default AdminSubmission;\nvar _c;\n$RefreshReg$(_c, \"AdminSubmission\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","Fragment","_Fragment","AdminSubmission","_s","examId","studentId","exam","setExam","questionTexts","setQuestionTexts","answerTexts","setAnswerTexts","marks","setMarks","fetchExamDetails","response","fetch","ok","Error","status","json","questionData","Promise","all","questionIds","map","id","question","text","questionText","correctAnswer","answer","answerText","error","console","fetchMarks","marksData","message","submitMarks","method","headers","body","JSON","stringify","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","name","duration","totalMarks","index","type","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/aryansingh/Desktop/Exam portal/exam-portal-frontend/src/pages/AdminSubmission.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\n// ...\n\nconst AdminSubmission = () => {\n    const { examId, studentId } = useParams();\n    const [exam, setExam] = useState(null);\n    const [questionTexts, setQuestionTexts] = useState([]);\n    const [answerTexts, setAnswerTexts] = useState([]);\n    const [marks, setMarks] = useState('');\n\n    useEffect(() => {\n        const fetchExamDetails = async () => {\n            try {\n                const response = await fetch(`http://localhost:5001/api/admin-view-exams/${examId}`);\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                const exam = await response.json();\n                setExam(exam);\n\n                // Fetch question text for each question ID\n                const questionData = await Promise.all(exam.questionIds.map(async id => {\n                    const response = await fetch(`http://localhost:5001/api/admin-view-question/${id}/${studentId}`);\n                    if (!response.ok) {\n                        throw new Error(`HTTP error! status: ${response.status}`);\n                    }\n                    const question = await response.json();\n                    return {\n                        text: question.questionText,\n                        correctAnswer: question.correctAnswer,\n                        marks: question.marks\n                    };\n                }));\n\n                setQuestionTexts(questionData);\n\n                // Fetch answer text for each question ID and student ID\n                const answerTexts = await Promise.all(exam.questionIds.map(async id => {\n                    const response = await fetch(`http://localhost:5001/api/admin-view-answer/${id}/${studentId}`);\n                    if (!response.ok) {\n                        throw new Error(`HTTP error! status: ${response.status}`);\n                    }\n                    const answer = await response.json();\n                    return answer.answerText;\n                }));\n\n                setAnswerTexts(answerTexts);\n            } catch (error) {\n                console.error(error);\n            }\n        };\n\n        fetchExamDetails();\n    }, [examId]);\n\n    useEffect(() => {\n        const fetchMarks = async () => {\n            try {\n                const response = await fetch(`http://localhost:5001/api/admin-view-marks/${examId}/${studentId}`);\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                const marksData = await response.json();\n                setMarks(marksData.marks);\n            } catch (error) {\n                if (error.message === 'HTTP error! status: 404') {\n                    setMarks('Not Graded');\n                } else {\n                    console.error(error);\n                }\n            }\n        };\n\n        fetchMarks();\n    }, [examId, studentId]);\n\n    const submitMarks = async () => {\n        try {\n            const response = await fetch(`http://localhost:5001/api/admin-submit-marks/${studentId}/${examId}`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ marks }),\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            alert(\"Marks submitted successfully!\");\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n\n    return (\n        <div>\n            {exam && (\n                <>\n                    <h2>Exam Details:</h2>\n                    <p>Name: {exam.name}</p>\n                    <p>Duration: {exam.duration}</p>\n                    <p>Total Marks: {exam.totalMarks}</p>\n                    <p> Marks Obtained: {typeof marks === 'string' ? marks : marks.marks}</p>\n                    <h2>Question IDs and Texts:</h2>\n                    {questionTexts.map((question, index) => (\n  <div key={index}>\n    <p>{question.text}</p>\n    <p>Correct Answer: {question.correctAnswer}</p>\n    <p>Marks: {question.marks}</p>\n    <p>Answer: {answerTexts[index]}</p>\n  </div>\n))}\n                    <input type=\"number\" value={marks} onChange={e => setMarks(e.target.value)} />\n                    <button onClick={submitMarks}>Submit Marks</button>\n                </>\n            )}\n        </div>\n    );\n}\nexport default AdminSubmission;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}